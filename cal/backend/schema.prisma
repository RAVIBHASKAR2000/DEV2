datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                         String             @id @default(cuid())
  name                       String?
  email                      String?            @unique
  password                   String?
  language                   String?
  country                    String?
  timezone                   String?
  meetings                   Meeting[]          @relation("Meeting_user")
  from_EventType_user        EventType[]        @relation("EventType_user")
  from_Credential_user       Credential[]       @relation("Credential_user")
  from_Membership_user       Membership[]       @relation("Membership_user")
  from_Booking_user          Booking[]          @relation("Booking_user")
  from_Availability_user     Availability[]     @relation("Availability_user")
  from_SelectedCalender_user SelectedCalender[] @relation("SelectedCalender_user")
}

model Meeting {
  id          String    @id @default(cuid())
  meetingtype Int?
  date        DateTime?
  guestName   String?
  guestEmail  String?
  meetingDesc String?
  user        User?     @relation("Meeting_user", fields: [userId], references: [id])
  userId      String?   @map("user")

  @@index([userId])
}

model EventType {
  id                                  String                 @id @default(cuid())
  title                               String?
  slug                                String?
  description                         String?
  locations                           Json?
  length                              Int?
  hidden                              Boolean?
  user                                User?                  @relation("EventType_user", fields: [userId], references: [id])
  userId                              String?                @map("user")
  bookings                            Booking?               @relation("EventType_bookings", fields: [bookingsId], references: [id])
  bookingsId                          String?                @map("bookings")
  availability                        Availability?          @relation("EventType_availability", fields: [availabilityId], references: [id])
  availabilityId                      String?                @map("availability")
  eventName                           String?
  customInputs                        EventTypeCustomInput?  @relation("EventType_customInputs", fields: [customInputsId], references: [id])
  customInputsId                      String?                @map("customInputs")
  timeZone                            String?
  periodType                          String?
  periodStartDate                     DateTime?
  periodEndDate                       DateTime?
  periodDays                          Int?
  periodCountCalendarDays             Boolean?
  requiresConfirmation                Boolean?
  minimumBookingNotice                Int?
  from_Booking_eventType              Booking[]              @relation("Booking_eventType")
  from_Availability_eventType         Availability[]         @relation("Availability_eventType")
  from_EventTypeCustomInput_eventType EventTypeCustomInput[] @relation("EventTypeCustomInput_eventType")

  @@index([slug])
  @@index([userId])
  @@index([bookingsId])
  @@index([availabilityId])
  @@index([customInputsId])
}

model Credential {
  id     String  @id @default(cuid())
  type   String?
  key    Json?
  user   User?   @relation("Credential_user", fields: [userId], references: [id])
  userId String? @map("user")

  @@index([userId])
}

model Team {
  id                   String       @id @default(cuid())
  name                 String?
  slug                 String?
  members              Membership?  @relation("Team_members", fields: [membersId], references: [id])
  membersId            String?      @map("members")
  from_Membership_team Membership[] @relation("Membership_team")

  @@index([membersId])
}

model Membership {
  id                String   @id @default(cuid())
  accepted          Boolean?
  role              String?
  team              Team?    @relation("Membership_team", fields: [teamId], references: [id])
  teamId            String?  @map("team")
  user              User?    @relation("Membership_user", fields: [userId], references: [id])
  userId            String?  @map("user")
  from_Team_members Team[]   @relation("Team_members")

  @@index([teamId])
  @@index([userId])
}

model verificationRequest {
  id         String    @id @default(cuid())
  identifier String?
  token      String?   @unique
  expires    DateTime?
  createdAt  DateTime?
  updatedAt  DateTime?
}

model BookingRef {
  id                      String    @id @default(cuid())
  type                    String?
  uid                     String?
  booking                 Booking?  @relation("BookingRef_booking", fields: [bookingId], references: [id])
  bookingId               String?   @map("booking")
  from_Booking_references Booking[] @relation("Booking_references")

  @@index([bookingId])
}

model Attendee {
  id                     String    @id @default(cuid())
  email                  String?
  name                   String?
  timeZone               String?
  booking                Booking?  @relation("Attendee_booking", fields: [bookingId], references: [id])
  bookingId              String?   @map("booking")
  from_Booking_attendees Booking[] @relation("Booking_attendees")

  @@index([bookingId])
}

model Booking {
  id                      String       @id @default(cuid())
  uid                     String?      @unique
  user                    User?        @relation("Booking_user", fields: [userId], references: [id])
  userId                  String?      @map("user")
  references              BookingRef?  @relation("Booking_references", fields: [referencesId], references: [id])
  referencesId            String?      @map("references")
  eventType               EventType?   @relation("Booking_eventType", fields: [eventTypeId], references: [id])
  eventTypeId             String?      @map("eventType")
  title                   String?
  description             String?
  startTime               DateTime?
  endTime                 DateTime?
  attendees               Attendee?    @relation("Booking_attendees", fields: [attendeesId], references: [id])
  attendeesId             String?      @map("attendees")
  location                String?
  createdAt               DateTime?
  updatedAt               DateTime?
  confirmed               Boolean?
  rejected                Boolean?
  from_EventType_bookings EventType[]  @relation("EventType_bookings")
  from_BookingRef_booking BookingRef[] @relation("BookingRef_booking")
  from_Attendee_booking   Attendee[]   @relation("Attendee_booking")

  @@index([userId])
  @@index([referencesId])
  @@index([eventTypeId])
  @@index([attendeesId])
}

model Availability {
  id                          String      @id @default(cuid())
  label                       String?
  user                        User?       @relation("Availability_user", fields: [userId], references: [id])
  userId                      String?     @map("user")
  eventType                   EventType?  @relation("Availability_eventType", fields: [eventTypeId], references: [id])
  eventTypeId                 String?     @map("eventType")
  startTime                   Int?
  endTime                     Int?
  date                        DateTime?
  from_EventType_availability EventType[] @relation("EventType_availability")

  @@index([userId])
  @@index([eventTypeId])
}

model SelectedCalender {
  id          String  @id @default(cuid())
  user        User?   @relation("SelectedCalender_user", fields: [userId], references: [id])
  userId      String? @map("user")
  integration String?
  externalId  String?

  @@index([userId])
}

model ResetPasswordRequest {
  id        String    @id @default(cuid())
  createdAt DateTime?
  updatedAt DateTime?
  email     String?
  expires   DateTime?
}

model RemainderMail {
  id             String    @id @default(cuid())
  referenceId    Int?
  reminderType   Int?
  elapsedMinutes Int?
  createdAt      DateTime?
}

model EventTypeCustomInput {
  id                          String      @id @default(cuid())
  eventType                   EventType?  @relation("EventTypeCustomInput_eventType", fields: [eventTypeId], references: [id])
  eventTypeId                 String?     @map("eventType")
  label                       String?
  required                    Boolean?
  placeholder                 String?
  from_EventType_customInputs EventType[] @relation("EventType_customInputs")

  @@index([eventTypeId])
}