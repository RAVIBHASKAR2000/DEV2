type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  language: String
  country: String
  timezone: String
  meetings(
    where: MeetingWhereInput! = {}
    search: String
    sortBy: [SortMeetingsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MeetingOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Meeting!]
  _meetingsMeta(
    where: MeetingWhereInput! = {}
    search: String
    sortBy: [SortMeetingsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MeetingOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use meetingsCount instead."
    )
  meetingsCount(where: MeetingWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  language: String
  language_not: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  language_i: String
  language_not_i: String
  language_contains_i: String
  language_not_contains_i: String
  language_starts_with_i: String
  language_not_starts_with_i: String
  language_ends_with_i: String
  language_not_ends_with_i: String
  language_in: [String]
  language_not_in: [String]
  country: String
  country_not: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  country_i: String
  country_not_i: String
  country_contains_i: String
  country_not_contains_i: String
  country_starts_with_i: String
  country_not_starts_with_i: String
  country_ends_with_i: String
  country_not_ends_with_i: String
  country_in: [String]
  country_not_in: [String]
  timezone: String
  timezone_not: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  timezone_i: String
  timezone_not_i: String
  timezone_contains_i: String
  timezone_not_contains_i: String
  timezone_starts_with_i: String
  timezone_not_starts_with_i: String
  timezone_ends_with_i: String
  timezone_not_ends_with_i: String
  timezone_in: [String]
  timezone_not_in: [String]
  meetings_every: MeetingWhereInput
  meetings_some: MeetingWhereInput
  meetings_none: MeetingWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  language_ASC
  language_DESC
  country_ASC
  country_DESC
  timezone_ASC
  timezone_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  language: OrderDirection
  country: OrderDirection
  timezone: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  language: String
  country: String
  timezone: String
  meetings: MeetingRelateToManyInput
}

input MeetingRelateToManyInput {
  create: [MeetingCreateInput]
  connect: [MeetingWhereUniqueInput]
  disconnect: [MeetingWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  language: String
  country: String
  timezone: String
  meetings: MeetingRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

type Meeting {
  id: ID!
  meetingtype: Int
  date: String
  guestName: String
  guestEmail: String
  meetingDesc: String
  user: User
}

input MeetingWhereInput {
  AND: [MeetingWhereInput!]
  OR: [MeetingWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  meetingtype: Int
  meetingtype_not: Int
  meetingtype_in: [Int]
  meetingtype_not_in: [Int]
  date: String
  date_not: String
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_in: [String]
  date_not_in: [String]
  guestName: String
  guestName_not: String
  guestName_contains: String
  guestName_not_contains: String
  guestName_starts_with: String
  guestName_not_starts_with: String
  guestName_ends_with: String
  guestName_not_ends_with: String
  guestName_i: String
  guestName_not_i: String
  guestName_contains_i: String
  guestName_not_contains_i: String
  guestName_starts_with_i: String
  guestName_not_starts_with_i: String
  guestName_ends_with_i: String
  guestName_not_ends_with_i: String
  guestName_in: [String]
  guestName_not_in: [String]
  guestEmail: String
  guestEmail_not: String
  guestEmail_contains: String
  guestEmail_not_contains: String
  guestEmail_starts_with: String
  guestEmail_not_starts_with: String
  guestEmail_ends_with: String
  guestEmail_not_ends_with: String
  guestEmail_i: String
  guestEmail_not_i: String
  guestEmail_contains_i: String
  guestEmail_not_contains_i: String
  guestEmail_starts_with_i: String
  guestEmail_not_starts_with_i: String
  guestEmail_ends_with_i: String
  guestEmail_not_ends_with_i: String
  guestEmail_in: [String]
  guestEmail_not_in: [String]
  meetingDesc: String
  meetingDesc_not: String
  meetingDesc_contains: String
  meetingDesc_not_contains: String
  meetingDesc_starts_with: String
  meetingDesc_not_starts_with: String
  meetingDesc_ends_with: String
  meetingDesc_not_ends_with: String
  meetingDesc_i: String
  meetingDesc_not_i: String
  meetingDesc_contains_i: String
  meetingDesc_not_contains_i: String
  meetingDesc_starts_with_i: String
  meetingDesc_not_starts_with_i: String
  meetingDesc_ends_with_i: String
  meetingDesc_not_ends_with_i: String
  meetingDesc_in: [String]
  meetingDesc_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
}

input MeetingWhereUniqueInput {
  id: ID
}

enum SortMeetingsBy {
  id_ASC
  id_DESC
  meetingtype_ASC
  meetingtype_DESC
  date_ASC
  date_DESC
  guestName_ASC
  guestName_DESC
  guestEmail_ASC
  guestEmail_DESC
  meetingDesc_ASC
  meetingDesc_DESC
}

input MeetingOrderByInput {
  id: OrderDirection
  meetingtype: OrderDirection
  date: OrderDirection
  guestName: OrderDirection
  guestEmail: OrderDirection
  meetingDesc: OrderDirection
}

input MeetingUpdateInput {
  meetingtype: Int
  date: String
  guestName: String
  guestEmail: String
  meetingDesc: String
  user: UserRelateToOneInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input MeetingsUpdateInput {
  id: ID!
  data: MeetingUpdateInput
}

input MeetingCreateInput {
  meetingtype: Int
  date: String
  guestName: String
  guestEmail: String
  meetingDesc: String
  user: UserRelateToOneInput
}

input MeetingsCreateInput {
  data: MeetingCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createMeeting(data: MeetingCreateInput): Meeting
  createMeetings(data: [MeetingsCreateInput]): [Meeting]
  updateMeeting(id: ID!, data: MeetingUpdateInput): Meeting
  updateMeetings(data: [MeetingsUpdateInput]): [Meeting]
  deleteMeeting(id: ID!): Meeting
  deleteMeetings(ids: [ID!]): [Meeting]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allMeetings(
    where: MeetingWhereInput! = {}
    search: String
    sortBy: [SortMeetingsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MeetingOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Meeting!]
  Meeting(where: MeetingWhereUniqueInput!): Meeting
  _allMeetingsMeta(
    where: MeetingWhereInput! = {}
    search: String
    sortBy: [SortMeetingsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MeetingOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use meetingsCount instead."
    )
  meetingsCount(where: MeetingWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
